import os
from dotenv import load_dotenv
import psycopg2
import schedule
import time
import requests
from datetime import datetime
from psycopg2 import OperationalError
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from webdriver_manager.chrome import ChromeDriverManager
import traceback
import sys
from models import day_to_duty


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('key.env')

SQL_ADRES = os.getenv("SQL_ADRES")
SQL_USER = os.getenv("SQL_USER")
SQL_PASSWORD = os.getenv("SQL_PASSWORD")
SQL_DATABASE = os.getenv("SQL_DATABASE")
SQL_PORT = os.getenv("SQL_PORT")

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_KEY = os.getenv("API_KEY")
API_URL = os.getenv("API_URL")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
THREAD_ID = os.getenv("THREAD_ID")
MEDOC_URL = os.getenv("MEDOC_URL")
VERSION_FILE = "version.txt"




def get_message_ending(count):
    if 11 <= count % 100 <= 19:
        return "—Å–æ–æ–±—â–µ–Ω–∏–π"
    elif count % 10 == 1:
        return "—Å–æ–æ–±—â–µ–Ω–∏–µ"
    elif 2 <= count % 10 <= 4:
        return "—Å–æ–æ–±—â–µ–Ω–∏—è"
    else:
        return "—Å–æ–æ–±—â–µ–Ω–∏–π"

def duty_day():
    user = day_to_duty()
    message = (f"–°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä–∏—Ç: <b>{ user }</b>")
    send_to_telegram(message, thread_id=THREAD_ID)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def create_connection():
    try:
        connection = psycopg2.connect(
            host=SQL_ADRES,
            user=SQL_USER,
            password=SQL_PASSWORD,
            database=SQL_DATABASE,
            port=SQL_PORT,
            client_encoding='UTF8'
        )
        print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return connection
    except OperationalError as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

def get_montly_summary():
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
    today = datetime.date.today()
    year = today.year
    month = today.month
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    start_date = datetime.date(year, month, 1)
    next_month = month % 12 + 1
    next_year = year if month < 12 else year + 1
    end_date = datetime.date(next_year, next_month, 1) - datetime.timedelta(days=1)
    query = """
    SELECT user_name, COUNT(slack_messages) AS message_count
    FROM slack_messages
    WHERE date::date >= %s AND date::date <= %s
    GROUP BY user_name
    """
    try:
        connection = create_connection()
        with connection.cursor() as cursor:
            cursor.execute(query, (start_date, end_date))
            result = cursor.fetchall()
            return result
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return []
    finally:
        if 'connection' in locals() and connection is not None:
            connection.close()

def get_daily_summary():
    query = """
            SELECT user_name, COUNT(*) as message_count
            FROM slack_messages
            WHERE date::date = %s
            GROUP BY user_name
            ORDER BY message_count DESC
    """
    today = datetime.now().date()
    try:
        connection = create_connection()
        with connection.cursor() as cursor:
            cursor.execute(query, (today,))
            result = cursor.fetchall()
            return result
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return []
    finally:
        if 'connection' in locals() and connection is not None:
            connection.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_to_telegram(message, thread_id=None, retries=3):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message, "parse_mode": "HTML"}
    if thread_id:
        payload["message_thread_id"] = thread_id

    for attempt in range(retries):
        try:
            response = requests.post(url, json=payload, timeout=10)
            if response.status_code == 200:
                return
        except Exception as e:
            print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π


def send_summary_monthly():
    today = datetime.date.today()
    year = today.year
    month = today.month
    summary = get_montly_summary()
    start_date = datetime.date(year, month, 1)
    next_month = month % 12 + 1
    next_year = year if month < 12 else year + 1
    end_date = datetime.date(next_year, next_month, 1) - datetime.timedelta(days=1)
    if not summary:
        log_error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏.")
        return

    message = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ Slack –∑–∞ <b>{start_date} - { end_date}</b>: \n"
    for user_name, count in summary:
        ending = get_message_ending(count)
        message += f"üë§<b>{user_name}</b>: {count} {ending}\n"
    print(f"{message}\n")
    send_to_telegram(message, hread_id=THREAD_ID)
    

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –∑–∞ –¥–µ–Ω—å
def send_summary():
    summary = get_daily_summary()
    today = datetime.now().date()
    if not summary:
        log_error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏.")
        return

    message = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ Slack –∑–∞ <b>{today}</b>: \n"
    for user_name, count in summary:
        ending = get_message_ending(count)
        message += f"üë§<b>{user_name}</b>: {count} {ending}\n"
    print(f"{message}\n")
    send_to_telegram(message, thread_id=THREAD_ID)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π M.E.Doc
def check_medoc_updates():
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service)
    try:
        driver.get(MEDOC_URL)
        version_new = driver.find_element(By.CLASS_NAME, "js-update-num").text
        if os.path.exists(VERSION_FILE):
            with open(VERSION_FILE, "r", encoding='utf-8') as file:
                version_actual = file.read().strip()
        else:
            version_actual = ""

        if version_new != version_actual:
            with open(VERSION_FILE, "w", encoding='utf-8') as file:
                file.write(version_new)
            message = (
                f"\U0001F195 –í—ã—à–ª–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è M.E.Do—Å: <b>{version_new}</b>.\n"
                f"–û–±–Ω–æ–≤–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!"
            )
            send_to_telegram(message, thread_id=THREAD_ID)
            print(f"–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {version_new}")
        else:
            log_error(f"–í–µ—Ä—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞: {version_actual}")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π M.E.Doc: {e}")
    finally:
        driver.quit()


def check_next_month():
    today = datetime.now().date()
    if today.day == 1:
        result = send_summary_monthly()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á
def main():
    schedule.every().day.at("08:00").do(duty_day())
    schedule.every().day.at("00:00").do(check_next_month)
    schedule.every().day.at("23:00").do(send_summary)
    schedule.every().saturday.at("09:00").do(check_medoc_updates)
    

    while True:
        schedule.run_pending()
        time.sleep(60)


if __name__ == "__main__":
    main()